import './App.css';
import './index.css';
import axios, {AxiosError} from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from "react-dom";
import {BrowserRouter, Route, Routes } from 'react-router-dom'

function App() {
//1
//     import React from 'react'
//     import ReactDOM from 'react-dom/client';
//     import { Route, Routes } from 'react-router-dom'
//
//     const Main = () => {
//         return (
//             <>
//                 <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//                 <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//             </>
//         )
//     }
// // App
//     const App = () => {
//
//         return (
//             <Routes>
//             <Route path={'/'} element={<Main/>} /> // –í–Ω–∏–º–∞–Ω–∏–µ
//             {/*    <Route path={'/'} element={<Main/>}/>*/}
//             </Routes>
//         )
//     }
// @ts-ignore
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<App/>)

// –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω... –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} component={<Main/>}/>
//2

    // import React from 'react'
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Route, Routes } from 'react-router-dom'

    // const Main = () => {
    //     return (
    //         <>
    //             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
    //             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
    //         </>
    //     )
    // }

// App
//     const App = () => {
//         return (
//             <Routes>
//                 {/*<Route path={'/'} element={Main}/>*/}
//                 <Route path={'/'} element={<Main/>}/>//–í–Ω–∏–º–∞–Ω–∏–µ
//             </Routes>
//         )
//     }
//
// @ts-ignore
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<BrowserRouter><App/></BrowserRouter>)

    // –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π...
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState
//3
//     import React from 'react'
//     import ReactDOM from 'react-dom/client';
//     import { BrowserRouter, Route, Routes } from 'react-router-dom'

    // const PageNotFound = () => {
    //     return <h2>‚õî 404. Page not found ‚õî</h2>
    // }
    //
    // const Profile = () => {
    //     return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
    // }


//     const Main = () => {
//         return (
//             <>
//                 <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//                 <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//             </>
//         )
//     }
//     // App
//     const App = () => {
//
//         return (
//             <Routes>
//                 {/*<Route path={'/'} element={"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"}/>*/}
//                 <Route path={'/'} element={<Redirect to='profile'/>}/> //–í–Ω–∏–º–∞–Ω–∏–µ
//                 <Route path={'profile'} element={<Profile/>}/>
//                 <Route path={'*'} element={<PageNotFound/>}/>
//             </Routes>
//         )
//     }
// // @ts-ignore
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<BrowserRouter><App/></BrowserRouter>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞".
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ Route —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å
// —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} element={'to profile page'}/>
//4
//     import { useFormik } from 'formik';
//     import React from 'react'
//     import ReactDOM from 'react-dom/client';
//     import { BrowserRouter, Route, Routes } from 'react-router-dom'

// Main
//     export const Login = () => {

        // const formik = useFormik({
        //     initialValues: {
        //         email: '',
        //         password: '',
        //     },
        //     onSubmit: values => {
        //         alert(JSON.stringify(values, null, 2));
        //     },
        // });
        //
        // return (
    // <form  onSubmit={formik.handleSubmit}> //–í–Ω–∏–º–∞–Ω–∏–µ
        //     <form>
        //         <div>
        //             <input
        //                 name="email"
        //                 onChange={formik.handleChange}
        //                 value={formik.values.email}
        //                 type="text"
        //                 placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
        //             />
    {/*            </div>*/}
    {/*            <div>*/}
    {/*                <input*/}
    {/*                    name="password"*/}
    {/*                    onChange={formik.handleChange}*/}
    {/*                    value={formik.values.password}*/}
    {/*                    type="password"*/}
    {/*                    placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}*/}
    {/*                />*/}
    {/*            </div>*/}
    {/*            <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>*/}
    {/*        </form>*/}
    {/*    );*/}
    {/*}*/}

// App
//     export const App = () => {
//         return (
//             <Routes>
//                 <Route path={''} element={<Login/>}/>
//             </Routes>
//         )
//     }
//
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<BrowserRouter><App/></BrowserRouter>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å alert c
// –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–æ –∏–∑-–∑–∞ –¥–æ–ø—É—â–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: alert(JSON.stringify(values));

    //5
    // import { useFormik } from 'formik';
    // import React from 'react'
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Route, Routes } from 'react-router-dom'


// Main
//     export const Login = () => {
//
//         const formik = useFormik({
//             initialValues: {
//                 firstName: '',
//                 lastName: '',
//                 email: '',
//                 password: '',
//                 phone: '',
//             },
//             onSubmit: values => {
//                 alert(JSON.stringify(values, null, 2));
//             },
//         });

        // return (

        //     <form onSubmit={formik.handleSubmit}>
        //         <div>
        //             <input
        //                 name="firstName"
        //                 onChange={formik.handleChange}
        //                 value={formik.values.firstName}
        //                 placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'}
        //             />
        //         </div>
        //         <div>
                {/*    <input*/}
                {/*        name="lastName"*/}
                {/*        onChange={formik.handleChange}*/}
                {/*        value={formik.values.lastName}*/}
                {/*        placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'}*/}
                {/*    />*/}
                {/*</div>*/}
                {/*<div>*/}
                {/*    <input*/}
                {/*        name="email"*/}
                {/*        onChange={formik.handleChange}*/}
                {/*        value={formik.values.email}*/}
                {/*        placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}*/}
                {/*    />*/}
                {/*</div>*/}
                {/*<div>*/}
    {/*                <input*/}
    {/*                    name="password"*/}
    {/*                    onChange={formik.handleChange}*/}
    {/*                    value={formik.values.password}*/}
    {/*                    placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}*/}
    {/*                    type={'password'}*/}
    {/*                />*/}
    {/*            </div>*/}
    {/*            <div>*/}
    {/*                <input*/}
    {/*                    name="password"*/}
    // name="phone"//–í–Ω–∏–º–∞–Ω–∏–µ
    {/*                    onChange={formik.handleChange}*/}
    {/*                    value={formik.values.phone}*/}
    {/*                    placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'}*/}
    {/*                />*/}
    {/*            </div>*/}
    {/*            <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>*/}
    {/*        </form>*/}
    {/*    );*/}
    {/*}*/}

// App
//     export const App = () => {
//         return (
//             <Routes>
//                 <Route path={''} element={<Login/>}/>
//             </Routes>
//         )
//     }
//
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<BrowserRouter><App/></BrowserRouter>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ "–¢–µ–ª–µ—Ñ–æ–Ω–∞"
// –ù–∞–π–¥–∏—Ç–µ –≤ –∫–æ–¥–µ –æ—à–∏–±–∫—É. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  value={formik.values.phone}

    //6
    // import { useFormik } from 'formik';
    // import React from 'react'
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Route, Routes } from 'react-router-dom'


// Types
//     type LoginFieldsType = {
//         firstName?: string
//     }

// Main
//     export const Login = () => {

    //     const formik = useFormik({
    //         initialValues: {
    //             firstName: '',
    //         },
    //         validate: (values) => {
    //             const errors: LoginFieldsType = {};
    // if (values.firstName.length < 5) {errors.firstName = 'Must be 5 characters or more';}// –í–Ω–∏–º–∞–Ω–∏–µ
    //             return errors
    //         },
    //         onSubmit: values => {
    //             alert(JSON.stringify(values, null, 2));
    //         }
    //     });
    //
    //
    //     return (
    //         <form onSubmit={formik.handleSubmit}>
    //             <div>
    //                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
    //             </div>
    //             <button type="submit" disabled={!(formik.isValid && formik.dirty)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    //         </form>
    //     );
    // }

// App
//     export const App = () => {
//         return (
//             <Routes>
//                 <Route path={''} element={<Login/>}/>
//             </Routes>
//         )
//     }
//
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<BrowserRouter><App/></BrowserRouter>)

// –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ firstName —Å–∏–º–≤–æ–ª—ã. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—Å—è.
// –ó–∞–¥–∞—á–∞: –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ, –ª–∏–±–æ —Ä–∞–≤–Ω–∞ 5 —Å–∏–º–≤–æ–ª–∞–º.
// –¢.–µ. –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è firstName.
// ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'Must be 5 characters or more'
// ‚ùó –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è).
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return errors.firstName = 'Must be 5 characters or more'
// ‚ùó –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä yup) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ

    //7
    // import { useFormik } from 'formik';
    // import React from 'react'
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Route, Routes } from 'react-router-dom'


// Types
//     type LoginFieldsType = {
//         firstName: string
//         email: string
//     }

// Main
//     export const Login = () => {

        // const formik = useFormik({
        //     initialValues: {
        //         firstName: '',
        //         email: '',
        //     },
        //     validate: (values) => {
        //         const errors: Partial<LoginFieldsType> = {};
        //
        //         if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
        //             errors.email = 'Invalid email address';
        //         }
        //         return errors
        //     },
        //     onSubmit: values => {
        //         alert(JSON.stringify(values, null, 2));
        //     }
        // });

        // –§—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±—à—Ç–æ—Ä–º –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ true –≤ JSX
    //     const getTrue = () => {
    //         return true
    //     }
    //
    //     return (
    //         <form onSubmit={formik.handleSubmit}>
    //             <div>
    //                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
    //             </div>
    //             <div>
    //                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}{...formik.getFieldProps('email')}/>
    //                 {getTrue() && <div style={{color: 'red'}}>ERROR</div>}
    // {getTrue() && <div style={{color: 'red'}}>{formik.errors.email}</div>} //–í–Ω–∏–º–∞–Ω–∏–µ
    //             </div>
    //             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    //         </form>
    //     );
    // }

// App
//     export const App = () => {
//         return (
//             <Routes>
//                 <Route path={''} element={<Login/>}/>
//             </Routes>
//         )
//     }
//
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<BrowserRouter><App/></BrowserRouter>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–≥—Ä—É–∑–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º email, –Ω–æ –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ 46 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã:
// 1) –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ email –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// 2) –í–º–µ—Å—Ç–æ ERROR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—é.
// 3) –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –ø–æ–ª–µ–º.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {true && <div style={{color: 'red'}}>error.email</div>}

    //8
    // import { useFormik } from 'formik';
    // import React, { useEffect } from 'react'
    // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Navigate, Route, Routes, useNavigate } from 'react-router-dom'
    // import axios, { AxiosError } from 'axios';
    // import { applyMiddleware, combineReducers, legacy_createStore as createStore, Dispatch } from 'redux';
    // import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';


// Types
//     type NullableType<T> = null | T
//     type UndefinedType<T> = undefined | T
//
//     type UserType = {
//         avatar: string
//         email: string
//         first_name: string
//         id: 1
//         last_name: string
//     }
//
//     type LoginFieldsType = {
//         email: string
//         password: string
//     }

// API
//     const instance = axios.create({
//         baseURL: 'https://reqres.in/api/'
//     })
//
//     const reqresAPI = {
//         getUsers() {
//             return instance.get('users?delay=1&per_page=12')
//         },
//         login(data: LoginFieldsType) {
//             return instance.post('login?delay=1', data)
//         },
//     }


// Reducer
//     const initState = {
//         isLoading: false,
//         error: null as NullableType<string>,
//         isLoggedIn: false,
//         randomUser: null as NullableType<UserType>
//     }
//
//     type InitStateType = typeof initState
//
//     const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//         switch (action.type) {
//             case 'APP/SET-RANDOM-USER':
//                 return {...state, randomUser: action.user}
//             case 'APP/SET-IS-LOGGED-IN':
//                 return {...state, isLoggedIn: action.isLoggedIn}
//             case 'APP/IS-LOADING':
//                 return {...state, isLoading: action.isLoading}
//             case 'APP/SET-ERROR':
//                 return {...state, error: action.error}
//             default:
//                 return state
//         }
//     }

// Actions
//     const setRandomUserAC = (user: UserType) => ({type: 'APP/SET-RANDOM-USER', user} as const)
//     const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
//     const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
//     const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
//     type ActionsType =
//         | ReturnType<typeof setRandomUserAC>
//         | ReturnType<typeof setIsLoggedIn>
//         | ReturnType<typeof setLoadingAC>
//         | ReturnType<typeof setError>


// Utils
//     const thunkFinallyHandler = (dispatch: Dispatch) => {
//         dispatch(setLoadingAC(false))
//         setTimeout(() => {
//             dispatch(setError(null))
//         }, 3000)
//     }

// Thunk
//     const getUsersTC = (): AppThunk => (dispatch) => {
//         dispatch(setLoadingAC(true))
//
//         const getRandomUser = (users: UserType[]): UndefinedType<UserType> => {
//             const randomUserId = Math.floor(Math.random() * 12) + 1
//             return users.find(u => u.id === randomUserId)
//         }
//
//         reqresAPI.getUsers()
//             .then((res) => {
//                 const user = getRandomUser(res.data.data)
//                 if (user) {
//                     dispatch(setRandomUserAC(user))
//                 }
//             })
//             .catch((e: AxiosError) => {
//                 dispatch(setError(e.message))
//             })
//             .finally(() => {
//                 thunkFinallyHandler(dispatch)
//             })
//     }

    // const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
    //     dispatch(setLoadingAC(true))
    //     reqresAPI.login(values)
    //         .then((res) => {
    //             dispatch(setIsLoggedIn(true))
    //             alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')
    //         })
    //         .catch((e) => {
    //             const error = e.response ? (e.response?.data.error || 'Some error') : e.message
    //             dispatch(setError(error))
    //         })
    //         .finally(() => {
    //             thunkFinallyHandler(dispatch)
    //         })
    // }

// Store
//     const rootReducer = combineReducers({
//         app: appReducer,
//     })
//
//     const store = createStore(rootReducer, applyMiddleware(thunk))
//     type RootState = ReturnType<typeof store.getState>
//     type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
//     type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
//     const useAppDispatch = () => useDispatch<AppDispatch>()
//     const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
//     export const Loader = () => {
//         return <h1>Loading ...</h1>
//     }

// Profile
//     export const Profile = () => {
//         return <h2>üòé Profile</h2>
//     }

// Login
//     export const Login = () => {
//
//         const dispatch = useAppDispatch()
//         const navigate = useNavigate()
//
//         const randomUser = useAppSelector(state => state.app.randomUser)
//         const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//         const error = useAppSelector(state => state.app.error)
//         const isLoading = useAppSelector(state => state.app.isLoading)
//
//         useEffect(() => {
//             dispatch(getUsersTC())
//         }, [])

        // const formik = useFormik({
        //     initialValues: {
        //         email: randomUser?.email ?? '',
        //         password: '',
        //     },
        //     enableReinitialize: true,
        //     onSubmit: values => {
        //         dispatch(loginTC(values))
    // navigate('profile')//–í–Ω–∏–º–∞–Ω–∏–µ
        //     }
        // });
    //
    //     return (
    //         <div>
    //             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
    //             {isLoading && <Loader/>}
    //             <form onSubmit={formik.handleSubmit}>
    //                 <div>
    //                     <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
    //                            {...formik.getFieldProps('email')}/>
    //                 </div>
    //                 <div>
    //                     <input type={'password'}
    //                            placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
    //                            {...formik.getFieldProps('password')}/>
    //                 </div>
    //                 <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
    //             </form>
    //         </div>
    //     );
    // }

// App
//     export const App = () => {
//         return (
//             <Routes>
//                 <Route path={''} element={<Login/>}/>
//                 <Route path={'profile'} element={<Profile/>}/>
//             </Routes>
//         )
//     }
//
//     const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//     root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)


// –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó –õ–æ–≥–∏–Ω –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (–∏–∑-–∑–∞ Api –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ email).
// –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// –ï—Å–ª–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ alert —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º -
// —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª.
// –ó–∞–¥–∞—á–∞: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.
// –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  console.log('If login => redirect to profile')

    //9

    // import React, { useEffect } from 'react'
    // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Route, Routes } from 'react-router-dom'
    // import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
    // import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
    // import axios from 'axios';

// Utils
//     console.log = () => {
//     };

// Api
//     const instance = axios.create({
//         baseURL: 'xxx'
//     })
//
//     const api = {
//         getUsers() {
//             /* 1 */
//             return instance.get('xxx')
//         }
//     }


// Reducer
//     const initState = {
//         isLoading: false,
//         users: [] as any[]
//     }
//
//     type InitStateType = typeof initState
//
//     const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//         switch (action.type) {
//             case 'APP/SET-USERS':
//                 /* 2 */
//                 return {...state, users: action.users}
//             default:
//                 return state
//         }
//     }

// Actions
//     const setUsersAC = (users: any[]) => ({type: 'APP/SET-USERS', users} as const)
//     type ActionsType = ReturnType<typeof setUsersAC>


// Thunk
//     const getUsersTC = (): AppThunk => (dispatch) => {
//         /* 3 */
//         api.getUsers()
//             .then((res) => {
//                 /* 4 */
//                 dispatch(setUsersAC(res.data.data))
//             })
//     }

// Store
//     const rootReducer = combineReducers({
//         app: appReducer,
//     })
//
//     const store = createStore(rootReducer, applyMiddleware(thunk))
//     type RootState = ReturnType<typeof store.getState>
//     type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
//     type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
//     const useAppDispatch = () => useDispatch<AppDispatch>()
//     const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Login
//     export const Login = () => {
//
//         const users = useAppSelector(state => state.app.users)
//         /* 5 */
//
//         return (
//             <div>
//                 {/* 6 */}
//                 {users.map((u) => <p key={u.id}>{u.email}</p>)}
//                 <h1>–í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ
//                     —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å
//                     –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
//                 </h1>
//             </div>
//         );
//     }

// App
//     export const App = () => {
//
//         /* 7 */
//         const dispatch = useAppDispatch()

    //     useEffect(() => {
    //         /* 8 */
    //         dispatch(getUsersTC())
    //     }, [])
    //
    //     /* 9 */
    //     return (
    //         <Routes>
    //             <Route path={''} element={<Login/>}/>
    //         </Routes>
    //     )
    // }
    //
    // const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
    // root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 11 —á–∏—Å–µ–ª.
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:    1 2 3 4 5 6 7 8 9 1 2     7 9 8 3 1 7 9 4 2 4 2

    //10

    // import React, { useEffect } from 'react'
    // import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
    // import ReactDOM from 'react-dom/client';
    // import { BrowserRouter, Route, Routes } from 'react-router-dom'
    // import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
    // import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
    // import axios from 'axios';


// Utils
//     console.log = () => {
//     };

// Api
//     const instance = axios.create({
//         baseURL: 'xxx'
//     })
//
//     const api = {
//         getUsers() {
//             return instance.get('xxx')
//         }
//     }


// Reducer
//     const initState = {
//         isLoading: false,
//         users: [] as any[]
//     }
//
//     type InitStateType = typeof initState

    // const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    //     switch (action.type) {
    //         case 'APP/SET-USERS':
    //             /* 1 */
    //             return {...state, users: action.users}
    //         case 'APP/IS-LOADING':
    //             /* 2 */
    //             return {...state, isLoading: action.isLoading}
    //         default:
    //             return state
    //     }
    // }

// Actions
//     const setUsersAC = (users: any[]) => ({type: 'APP/SET-USERS', users} as const)
//     const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
//     type ActionsType = | ReturnType<typeof setUsersAC> | ReturnType<typeof setLoadingAC>


// Thunk
//     const getUsersTC = (): AppThunk => (dispatch) => {
//         /* 3 */
//         dispatch(setLoadingAC(true))
//         api.getUsers()
//             .then((res) => {
//                 /* 4 */
//                 dispatch(setLoadingAC(false))
//                 /* 5 */
//                 dispatch(setUsersAC(res.data.data))
//             })
//     }

// Store
//     const rootReducer = combineReducers({
//         app: appReducer,
//     })
//
//     const store = createStore(rootReducer, applyMiddleware(thunk))
//     type RootState = ReturnType<typeof store.getState>
//     type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
//     type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
//     const useAppDispatch = () => useDispatch<AppDispatch>()
//     const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
//     export const Loader = () => {
//         /* 6 */
//         return (
//             <h1>Loading ...</h1>
//         )
//     }


// Login
//     export const Login = () => {
        /* 7 */

    //     const users = useAppSelector(state => state.app.users)
    //     const isLoading = useAppSelector(state => state.app.isLoading)
    //
    //     return (
    //         <div>
    //             {isLoading && <Loader/>}
    //             {users.map((u) => <p key={u.id}>{u.email}</p>)}
    //             <h1>–í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ
    //                 —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å
    //                 –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
    //             </h1>
    //         </div>
    //     );
    // }

// App
//     export const App = () => {
//         /* 8 */
//         const dispatch = useAppDispatch()
//
//         useEffect(() => {
//             /* 9 */
//             dispatch(getUsersTC())
//         }, [])

        /* 10 */
    //     return (
    //         <Routes>
    //             <Route path={''} element={<Login/>}/>
    //         </Routes>
    //     )
    // }
    //
    // const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
    // root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 13 —á–∏—Å–µ–ª.
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:    1 2 3 4 5 6 7 8 9 10 1 2 3    8 10 9 3 2 4 2 5 1
    return <div>Hi</div>


}
export default App;

// 3
import React from 'react'
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Route, Routes } from 'react-router-dom'


export const PageNotFound = () => {
    return <h2>‚õî 404. Page not found ‚õî</h2>
}

export const Profile = () => {
    return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
}


export const Main = () => {
    return (
        <>
            <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
            <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
        </>
    )
}

// App
export const App = () => {

    return (
        <Routes>
            <Route path={'/'} element={"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"}/>
            <Route path={'profile'} element={<Profile/>}/>
            <Route path={'*'} element={<PageNotFound/>}/>
        </Routes>
    )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<BrowserRouter><App/></BrowserRouter>)